// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package definitions

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EgressRequest struct {
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
}

func (m *EgressRequest) Reset()                    { *m = EgressRequest{} }
func (m *EgressRequest) String() string            { return proto.CompactTextString(m) }
func (*EgressRequest) ProtoMessage()               {}
func (*EgressRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *EgressRequest) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func init() {
	proto.RegisterType((*EgressRequest)(nil), "definitions.EgressRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Egress service

type EgressClient interface {
	BoshMetrics(ctx context.Context, in *EgressRequest, opts ...grpc.CallOption) (Egress_BoshMetricsClient, error)
}

type egressClient struct {
	cc *grpc.ClientConn
}

func NewEgressClient(cc *grpc.ClientConn) EgressClient {
	return &egressClient{cc}
}

func (c *egressClient) BoshMetrics(ctx context.Context, in *EgressRequest, opts ...grpc.CallOption) (Egress_BoshMetricsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Egress_serviceDesc.Streams[0], c.cc, "/definitions.Egress/BoshMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &egressBoshMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Egress_BoshMetricsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type egressBoshMetricsClient struct {
	grpc.ClientStream
}

func (x *egressBoshMetricsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Egress service

type EgressServer interface {
	BoshMetrics(*EgressRequest, Egress_BoshMetricsServer) error
}

func RegisterEgressServer(s *grpc.Server, srv EgressServer) {
	s.RegisterService(&_Egress_serviceDesc, srv)
}

func _Egress_BoshMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EgressRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EgressServer).BoshMetrics(m, &egressBoshMetricsServer{stream})
}

type Egress_BoshMetricsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type egressBoshMetricsServer struct {
	grpc.ServerStream
}

func (x *egressBoshMetricsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Egress_serviceDesc = grpc.ServiceDesc{
	ServiceName: "definitions.Egress",
	HandlerType: (*EgressServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BoshMetrics",
			Handler:       _Egress_BoshMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4e, 0x49, 0x4d, 0xcb, 0xcc, 0xcb,
	0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x96, 0xe2, 0x49, 0x2d, 0x4b, 0xcd, 0x2b, 0x29, 0x86, 0x48, 0x29,
	0x59, 0x70, 0xf1, 0xba, 0xa6, 0x17, 0xa5, 0x16, 0x17, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97,
	0x08, 0xa9, 0x73, 0xf1, 0x17, 0x97, 0x26, 0x15, 0x27, 0x17, 0x65, 0x16, 0x80, 0xd4, 0xc7, 0x67,
	0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xf1, 0x21, 0x0b, 0x7b, 0xa6, 0x18, 0x79, 0x73,
	0xb1, 0x41, 0x74, 0x0a, 0x39, 0x72, 0x71, 0x3b, 0xe5, 0x17, 0x67, 0xf8, 0xa6, 0x96, 0x14, 0x65,
	0x26, 0x17, 0x0b, 0x49, 0xe9, 0x21, 0x59, 0xa7, 0x87, 0x62, 0xba, 0x94, 0x10, 0xaa, 0x1c, 0xc8,
	0x25, 0x4a, 0x0c, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0xd7, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x51, 0xff, 0x2b, 0x13, 0xb8, 0x00, 0x00, 0x00,
}
